{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://D%3A/HP%20Shared/All%20Freelance%20Projects/Astroved/frontend/src/lib/utils.ts"],"sourcesContent":["// lib/utils.ts\r\nimport { type ClassValue, clsx } from \"clsx\"\r\nimport { twMerge } from \"tailwind-merge\"\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs))\r\n}"],"names":[],"mappings":"AAAA,eAAe;;;;AACf;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,qIAAA,CAAA,OAAI,AAAD,EAAE;AACtB"}},
    {"offset": {"line": 18, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 24, "column": 0}, "map": {"version":3,"sources":["file://D%3A/HP%20Shared/All%20Freelance%20Projects/Astroved/frontend/src/app/components/ui/button.tsx"],"sourcesContent":["// components/ui/button.tsx\r\nimport * as React from \"react\"\r\nimport { Slot } from \"@radix-ui/react-slot\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst buttonVariants = cva(\r\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\r\n        destructive: \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\r\n        outline: \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\r\n        secondary: \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\r\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\r\n        link: \"text-primary underline-offset-4 hover:underline\",\r\n      },\r\n      size: {\r\n        default: \"h-9 px-4 py-2\",\r\n        sm: \"h-8 rounded-md px-3 text-xs\",\r\n        lg: \"h-10 rounded-md px-8\",\r\n        icon: \"h-9 w-9\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"default\",\r\n    },\r\n  }\r\n)\r\n\r\nexport interface ButtonProps\r\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n    VariantProps<typeof buttonVariants> {\r\n  asChild?: boolean\r\n}\r\n\r\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\r\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\r\n    const Comp = asChild ? Slot : \"button\"\r\n    return (\r\n      <Comp\r\n        className={cn(buttonVariants({ variant, size, className }))}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n    )\r\n  }\r\n)\r\nButton.displayName = \"Button\"\r\n\r\nexport { Button, buttonVariants }"],"names":[],"mappings":"AAAA,2BAA2B;;;;;;AAC3B;AAEA;AACA;AAFA;;;;;;AAIA,MAAM,iBAAiB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACvB,qNACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aAAa;YACb,SAAS;YACT,WAAW;YACX,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AASF,MAAM,uBAAS,sMAAM,UAAU,CAC7B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAO,EAAE;IACxD,MAAM,OAAO,UAAU,gKAAA,CAAA,OAAI,GAAG;IAC9B,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,OAAO,WAAW,GAAG"}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 85, "column": 0}, "map": {"version":3,"sources":["file://D%3A/HP%20Shared/All%20Freelance%20Projects/Astroved/frontend/src/app/components/ui/input.tsx"],"sourcesContent":["// components/ui/input.tsx\r\nimport * as React from \"react\"\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nexport interface InputProps\r\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\r\n\r\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\r\n  ({ className, type, ...props }, ref) => {\r\n    return (\r\n      <input\r\n        type={type}\r\n        className={cn(\r\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\r\n          className\r\n        )}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n    )\r\n  }\r\n)\r\nInput.displayName = \"Input\"\r\n\r\nexport { Input }"],"names":[],"mappings":"AAAA,0BAA0B;;;;;AAC1B;AACA;;;;AAKA,MAAM,sBAAQ,sMAAM,UAAU,CAC5B,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;IAC9B,qBACE,8OAAC;QACC,MAAM;QACN,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,wUACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,MAAM,WAAW,GAAG"}},
    {"offset": {"line": 109, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 115, "column": 0}, "map": {"version":3,"sources":["file://D%3A/HP%20Shared/All%20Freelance%20Projects/Astroved/frontend/src/app/components/ui/card.tsx"],"sourcesContent":["// components/ui/card.tsx\r\nimport * as React from \"react\"\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst Card = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\r\n      \"rounded-xl border bg-card text-card-foreground shadow\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nCard.displayName = \"Card\"\r\n\r\nconst CardHeader = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\r\n    {...props}\r\n  />\r\n))\r\nCardHeader.displayName = \"CardHeader\"\r\n\r\nconst CardTitle = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  React.HTMLAttributes<HTMLHeadingElement>\r\n>(({ className, ...props }, ref) => (\r\n  <h3\r\n    ref={ref}\r\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\r\n    {...props}\r\n  />\r\n))\r\nCardTitle.displayName = \"CardTitle\"\r\n\r\nconst CardDescription = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  React.HTMLAttributes<HTMLParagraphElement>\r\n>(({ className, ...props }, ref) => (\r\n  <p\r\n    ref={ref}\r\n    className={cn(\"text-sm text-muted-foreground\", className)}\r\n    {...props}\r\n  />\r\n))\r\nCardDescription.displayName = \"CardDescription\"\r\n\r\nconst CardContent = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\r\n))\r\nCardContent.displayName = \"CardContent\"\r\n\r\nconst CardFooter = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\"flex items-center p-6 pt-0\", className)}\r\n    {...props}\r\n  />\r\n))\r\nCardFooter.displayName = \"CardFooter\"\r\n\r\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }"],"names":[],"mappings":"AAAA,yBAAyB;;;;;;;;;;AACzB;AACA;;;;AAEA,MAAM,qBAAO,sMAAM,UAAU,CAG3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,yDACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,sMAAM,UAAU,CAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,sMAAM,UAAU,CAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,6CAA6C;QAC1D,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,sMAAM,UAAU,CAGtC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,sMAAM,UAAU,CAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,sMAAM,UAAU,CAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG"}},
    {"offset": {"line": 191, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 301, "column": 0}, "map": {"version":3,"sources":["file://D%3A/HP%20Shared/All%20Freelance%20Projects/Astroved/frontend/src/app/admin/chat/page.tsx"],"sourcesContent":["// app/admin/chat/page.tsx\r\n'use client';\r\nimport React, { useState, useRef, useEffect } from 'react';\r\nimport { Button } from '@/app/components/ui/button';\r\nimport { Input } from '@/app/components/ui/input';\r\nimport { Card, CardContent } from '@/app/components/ui/card';\r\nimport { Loader2, Send, Bot, User as UserIcon, RotateCcw } from 'lucide-react';\r\nimport axios from 'axios';\r\n\r\n// API configuration\r\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000';\r\n\r\n// Define types\r\ninterface BirthDetails {\r\n  date?: string;\r\n  time?: string;\r\n  place?: string;\r\n  [key: string]: any; // For any other properties\r\n}\r\n\r\ninterface ChatMessage {\r\n  id: string;\r\n  role: 'user' | 'assistant';\r\n  content: string;\r\n  timestamp: string;\r\n}\r\n\r\n// Chat messages hook with unified API\r\nconst useChatMessages = () => {\r\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [conversationId, setConversationId] = useState<string | null>(null);\r\n  const [birthDetails, setBirthDetails] = useState<BirthDetails>({});\r\n\r\n  // Configure axios instance\r\n  const api = axios.create({\r\n    baseURL: API_BASE_URL,\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  });\r\n\r\n  // Add auth token to requests if available\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n    }\r\n  }, []);\r\n\r\n  // Start a new conversation\r\n  const startConversation = async (birthDetailsData: BirthDetails | null = null) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      // Use birth details if provided, otherwise use stored ones\r\n      const details = birthDetailsData || birthDetails || {};\r\n      \r\n      // Store birth details if provided\r\n      if (birthDetailsData) {\r\n        setBirthDetails(birthDetailsData);\r\n      }\r\n\r\n      const token = localStorage.getItem('token');\r\n      let response;\r\n      \r\n      if (token) {\r\n        // Try authenticated endpoint\r\n        try {\r\n          response = await api.post('/api/chat/start', { birth_details: details });\r\n          setConversationId(response.data.conversation_id);\r\n          \r\n          // Add initial message\r\n          const initialMessage: ChatMessage = {\r\n            id: Date.now().toString(),\r\n            role: 'assistant',\r\n            content: response.data.initial_response,\r\n            timestamp: new Date().toISOString()\r\n          };\r\n          setMessages([initialMessage]);\r\n          setLoading(false);\r\n          return;\r\n        } catch (error) {\r\n          console.log(\"Authenticated endpoint failed, using unified endpoint\");\r\n        }\r\n      }\r\n      \r\n      // Use the unified endpoint for new conversation\r\n      response = await axios.post(`${API_BASE_URL}/api/chat/query`, {\r\n        message: \"What is Parasara Jyotish astrology?\",\r\n        birth_details: details,\r\n        conversation_history: []\r\n      });\r\n      \r\n      // Store conversation ID if available\r\n      if (response.data.conversation_id) {\r\n        setConversationId(response.data.conversation_id);\r\n      } else {\r\n        setConversationId('session-' + Date.now());\r\n      }\r\n      \r\n      // Add initial message\r\n      const initialMessage: ChatMessage = {\r\n        id: Date.now().toString(),\r\n        role: 'assistant',\r\n        content: response.data.response,\r\n        timestamp: new Date().toISOString()\r\n      };\r\n      \r\n      setMessages([initialMessage]);\r\n    } catch (err: any) {\r\n      console.error(\"Error starting conversation:\", err);\r\n      setError(err.response?.data?.error || err.message || \"Failed to start conversation\");\r\n      \r\n      // Fallback to mock response\r\n      const mockResponse: ChatMessage = {\r\n        id: Date.now().toString(),\r\n        role: 'assistant',\r\n        content: 'Welcome to Parasara Jyotish! I can provide astrological insights based on Vedic principles. How can I assist you today?',\r\n        timestamp: new Date().toISOString()\r\n      };\r\n      \r\n      setConversationId('mock-conversation-' + Date.now());\r\n      setMessages([mockResponse]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Send a message\r\n  const sendMessage = async (content: string) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      // Add user message to the UI immediately\r\n      const userMsg: ChatMessage = {\r\n        id: Date.now().toString(),\r\n        role: 'user',\r\n        content,\r\n        timestamp: new Date().toISOString()\r\n      };\r\n      setMessages(prev => [...prev, userMsg]);\r\n\r\n      // If no conversation exists, start a new one\r\n      if (!conversationId) {\r\n        await startConversation();\r\n      }\r\n\r\n      // Check if message contains birth details\r\n      const mightContainBirthDetails = \r\n        content.includes(\"born\") || \r\n        content.includes(\"birth\") || \r\n        content.match(/\\d{1,2}[-/]\\d{1,2}[-/]\\d{2,4}/);\r\n      \r\n      if (mightContainBirthDetails) {\r\n        const extractedDetails = extractBirthDetails(content);\r\n        if (extractedDetails) {\r\n          setBirthDetails(extractedDetails);\r\n        }\r\n      }\r\n\r\n      // Create conversation history from previous messages\r\n      const conversationHistory = messages.map(msg => ({\r\n        role: msg.role,\r\n        content: msg.content\r\n      }));\r\n\r\n      // Use the unified chat endpoint\r\n      const response = await axios.post(`${API_BASE_URL}/api/chat/query`, {\r\n        message: content,\r\n        conversation_id: conversationId,\r\n        conversation_history: conversationHistory,\r\n        birth_details: birthDetails\r\n      });\r\n      \r\n      // Store conversation ID if it's a new conversation\r\n      if (response.data.conversation_id && conversationId && \r\n          !conversationId.includes('mock') && !conversationId.includes('session')) {\r\n        setConversationId(response.data.conversation_id);\r\n      }\r\n\r\n      // Process response\r\n      const assistantMessage: ChatMessage = {\r\n        id: Date.now().toString(),\r\n        role: 'assistant',\r\n        content: response.data.response,\r\n        timestamp: new Date().toISOString()\r\n      };\r\n      \r\n      // Check if response asks for birth details\r\n      const askingForBirthDetails = (\r\n        response.data.response.includes(\"birth details\") && \r\n        (response.data.response.includes(\"could you provide\") || \r\n         response.data.response.includes(\"would you mind sharing\"))\r\n      );\r\n      \r\n      if (askingForBirthDetails && Object.keys(birthDetails).length === 0) {\r\n        console.log(\"Assistant is asking for birth details\");\r\n      }\r\n      \r\n      setMessages(prev => [...prev, assistantMessage]);\r\n    } catch (err: any) {\r\n      console.error(\"Error sending message:\", err);\r\n      setError(err.response?.data?.error || err.message || \"Failed to send message\");\r\n      \r\n      // Fallback to mock response if all else fails\r\n      const mockResponse: ChatMessage = {\r\n        id: Date.now().toString(),\r\n        role: 'assistant',\r\n        content: generateMockResponse(content),\r\n        timestamp: new Date().toISOString()\r\n      };\r\n      \r\n      setMessages(prev => [...prev, mockResponse]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Extract birth details from user message\r\n  const extractBirthDetails = (message: string): BirthDetails | null => {\r\n    // Simple pattern matching to extract birth details\r\n    const datePattern = /(\\d{1,2}[-/]\\d{1,2}[-/]\\d{2,4}|\\d{1,2} [a-zA-Z]+ \\d{2,4})/;\r\n    const timePattern = /(\\d{1,2}:\\d{2} ?(?:AM|PM)?|\\d{1,2} ?(?:AM|PM))/i;\r\n    const placePattern = /(born in|birth place|place of birth) ([A-Za-z\\s,]+)/i;\r\n    \r\n    const dateMatch = message.match(datePattern);\r\n    const timeMatch = message.match(timePattern);\r\n    const placeMatch = message.match(placePattern);\r\n    \r\n    const details: BirthDetails = {};\r\n    if (dateMatch) details.date = dateMatch[1];\r\n    if (timeMatch) details.time = timeMatch[1];\r\n    if (placeMatch) details.place = placeMatch[2];\r\n    \r\n    if (Object.keys(details).length > 0) {\r\n      return details;\r\n    }\r\n    return null;\r\n  };\r\n\r\n  // Generate a mock response based on the question (fallback)\r\n  const generateMockResponse = (question: string): string => {\r\n    question = question.toLowerCase();\r\n    \r\n    if (question.includes('planet') || question.includes('graha')) {\r\n      return \"In Vedic astrology, there are nine celestial bodies or grahas: Sun (Surya), Moon (Chandra), Mars (Mangal), Mercury (Budha), Jupiter (Guru), Venus (Shukra), Saturn (Shani), and the lunar nodes Rahu and Ketu. Each planet represents different energies and influences various aspects of life.\";\r\n    } \r\n    else if (question.includes('house') || question.includes('bhava')) {\r\n      return \"Vedic astrology divides a birth chart into 12 houses or bhavas, each governing different areas of life. The 1st house represents self and personality, 2nd house wealth, 3rd house siblings, 4th house mother and home, 5th house creativity and children, and so on.\";\r\n    }\r\n    else if (question.includes('zodiac') || question.includes('rashi')) {\r\n      return \"Vedic astrology uses the sidereal zodiac with 12 signs (rashis): Aries (Mesha), Taurus (Vrishabha), Gemini (Mithuna), Cancer (Karka), Leo (Simha), Virgo (Kanya), Libra (Tula), Scorpio (Vrishchika), Sagittarius (Dhanu), Capricorn (Makara), Aquarius (Kumbha), and Pisces (Meena).\";\r\n    }\r\n    else if (question.includes('dasha') || question.includes('period')) {\r\n      return \"Parasara Jyotish uses the Vimshottari Dasha system to time events. This system divides life into planetary periods (dashas) and sub-periods (antardashas). The sequence is: Sun (6 years), Moon (10 years), Mars (7 years), Rahu (18 years), Jupiter (16 years), Saturn (19 years), Mercury (17 years), Ketu (7 years), and Venus (20 years).\";\r\n    }\r\n    return \"According to Parasara Jyotish principles, your question relates to the cosmic influences that shape our experiences. The planetary positions and their aspects form unique patterns that can provide insights into various life situations. Would you like to know more about a specific area of Vedic astrology?\";\r\n  };\r\n\r\n  // Reset conversation\r\n  const resetConversation = () => {\r\n    setMessages([]);\r\n    setConversationId(null);\r\n    setError(null);\r\n    startConversation();\r\n  };\r\n\r\n  // Update birth details\r\n  const updateBirthDetails = (details: BirthDetails) => {\r\n    setBirthDetails(details);\r\n  };\r\n\r\n  return { \r\n    messages, \r\n    loading, \r\n    error, \r\n    sendMessage, \r\n    startConversation, \r\n    resetConversation,\r\n    birthDetails,\r\n    updateBirthDetails,\r\n    extractBirthDetails\r\n  };\r\n};\r\n\r\nexport default function ChatPage() {\r\n  const { \r\n    messages, \r\n    loading, \r\n    error, \r\n    sendMessage, \r\n    startConversation, \r\n    resetConversation,\r\n    extractBirthDetails\r\n  } = useChatMessages();\r\n  const [inputValue, setInputValue] = useState('');\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n\r\n  // Start conversation if no messages exist\r\n  useEffect(() => {\r\n    if (messages.length === 0) {\r\n      startConversation();\r\n    }\r\n  }, [messages.length, startConversation]);\r\n\r\n  // Handle form submission\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim() && !loading) {\r\n      // Check if message contains birth details\r\n      extractBirthDetails(inputValue);\r\n      \r\n      sendMessage(inputValue);\r\n      setInputValue('');\r\n    }\r\n  };\r\n\r\n  // Auto-scroll to bottom of messages\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [messages]);\r\n\r\n  return (\r\n    <div className=\"flex flex-col h-[calc(100vh-7rem)]\">\r\n      <div className=\"mb-4 flex justify-between items-center\">\r\n        <div>\r\n          <h1 className=\"text-2xl font-bold text-gray-800\">Astrological Consultation</h1>\r\n          <p className=\"text-gray-600\">Ask questions and receive insights based on Vedic astrological principles</p>\r\n        </div>\r\n        <Button \r\n          variant=\"outline\" \r\n          className=\"flex items-center gap-2\"\r\n          onClick={resetConversation}\r\n          disabled={loading}\r\n        >\r\n          <RotateCcw size={16} />\r\n          New Consultation\r\n        </Button>\r\n      </div>\r\n\r\n      <Card className=\"flex-1 flex flex-col overflow-hidden\">\r\n        {/* Messages container */}\r\n        <div className=\"flex-1 overflow-y-auto p-4 space-y-4 bg-purple-50\">\r\n          {messages.length === 0 ? (\r\n            <div className=\"flex flex-col items-center justify-center h-full text-gray-500\">\r\n              <Bot size={48} className=\"mb-2 text-purple-400\" />\r\n              <p>Start your consultation by sending a message</p>\r\n              <Button \r\n                variant=\"outline\" \r\n                className=\"mt-4\"\r\n                onClick={() => startConversation()}\r\n              >\r\n                Start New Consultation\r\n              </Button>\r\n            </div>\r\n          ) : (\r\n            messages.map((message) => (\r\n              <div\r\n                key={message.id}\r\n                className={`flex ${\r\n                  message.role === 'user' ? 'justify-end' : 'justify-start'\r\n                }`}\r\n              >\r\n                <div\r\n                  className={`flex items-start space-x-2 max-w-[85%] ${\r\n                    message.role === 'user'\r\n                      ? 'flex-row-reverse space-x-reverse'\r\n                      : 'flex-row'\r\n                  }`}\r\n                >\r\n                  <div\r\n                    className={`p-2 rounded-full ${\r\n                      message.role === 'user'\r\n                        ? 'bg-purple-600 text-white'\r\n                        : 'bg-gray-200 text-gray-800'\r\n                    }`}\r\n                  >\r\n                    {message.role === 'user' ? (\r\n                      <UserIcon size={20} />\r\n                    ) : (\r\n                      <Bot size={20} />\r\n                    )}\r\n                  </div>\r\n                  <Card\r\n                    className={`${\r\n                      message.role === 'user'\r\n                        ? 'bg-purple-600 text-white'\r\n                        : 'bg-white'\r\n                    }`}\r\n                  >\r\n                    <CardContent className=\"p-3\">\r\n  {message.role === 'assistant' ? (\r\n    <div className=\"prose prose-purple max-w-none\">\r\n      <ReactMarkdown>{message.content}</ReactMarkdown>\r\n    </div>\r\n  ) : (\r\n    <p>{message.content}</p>\r\n  )}\r\n  <div \r\n    className={`text-xs mt-1 ${\r\n      message.role === 'user' ? 'text-purple-200' : 'text-gray-400'\r\n    }`}\r\n  >\r\n    {new Date(message.timestamp).toLocaleTimeString()}\r\n  </div>\r\n                    </CardContent>\r\n                  </Card>\r\n                </div>\r\n              </div>\r\n            ))\r\n          )}\r\n\r\n          {/* Loading indicator */}\r\n          {loading && (\r\n            <div className=\"flex justify-start\">\r\n              <Card className=\"bg-white\">\r\n                <CardContent className=\"p-3 flex items-center space-x-2\">\r\n                  <Loader2 size={16} className=\"animate-spin text-purple-600\" />\r\n                  <span className=\"text-gray-600\">Interpreting...</span>\r\n                </CardContent>\r\n              </Card>\r\n            </div>\r\n          )}\r\n\r\n          {/* Error message */}\r\n          {error && (\r\n            <div className=\"flex justify-center\">\r\n              <Card className=\"bg-red-50 border-red-200\">\r\n                <CardContent className=\"p-3 text-red-600\">\r\n                  <p>Error: {error}</p>\r\n                  <Button\r\n                    variant=\"outline\"\r\n                    size=\"sm\"\r\n                    className=\"mt-2\"\r\n                    onClick={() => resetConversation()}\r\n                  >\r\n                    Try Again\r\n                  </Button>\r\n                </CardContent>\r\n              </Card>\r\n            </div>\r\n          )}\r\n\r\n          <div ref={messagesEndRef} />\r\n        </div>\r\n\r\n        {/* Message input */}\r\n        <form onSubmit={handleSubmit} className=\"p-4 border-t bg-white mt-auto\">\r\n          <div className=\"flex space-x-2\">\r\n            <Input\r\n              value={inputValue}\r\n              onChange={(e) => setInputValue(e.target.value)}\r\n              placeholder=\"Type your question here...\"\r\n              disabled={loading}\r\n              className=\"flex-grow\"\r\n            />\r\n            <Button \r\n              type=\"submit\" \r\n              disabled={loading || !inputValue.trim()}\r\n              className=\"bg-purple-600 hover:bg-purple-700\"\r\n            >\r\n              {loading ? (\r\n                <Loader2 size={20} className=\"animate-spin\" />\r\n              ) : (\r\n                <Send size={20} />\r\n              )}\r\n            </Button>\r\n          </div>\r\n          <p className=\"text-xs text-gray-500 mt-2\">\r\n            Your consultation is based on Vedic astrological principles and knowledge from ancient texts.\r\n          </p>\r\n        </form>\r\n      </Card>\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 932, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}